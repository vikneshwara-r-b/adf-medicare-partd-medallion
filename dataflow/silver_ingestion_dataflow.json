{
	"name": "silver_ingestion_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "providerstream"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "geographybydrugstream"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "silverproviderscleanedsink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "silverdrugsstandardizedsink"
				}
			],
			"transformations": [
				{
					"name": "providerstreamderivedcolumns"
				},
				{
					"name": "renameproviderstreamcolumns"
				},
				{
					"name": "selectgeographybydrugstreamcols"
				},
				{
					"name": "geographybydrugderivedcols"
				},
				{
					"name": "selectproviderstreamcolumns"
				},
				{
					"name": "selectdrugandclaimcost"
				},
				{
					"name": "calculateaveragecostperclaim"
				},
				{
					"name": "filtervalidclaimanddrugtotals"
				},
				{
					"name": "joinedgeographydrugdataset"
				},
				{
					"name": "derivedColumnsforsilverdrugstandardization"
				},
				{
					"name": "silverdrugstandardizedcolumns"
				},
				{
					"name": "geographybydrugselectcols"
				},
				{
					"name": "geographybydrugrawderivedcols"
				},
				{
					"name": "geographybydrugrawderivedcolspart2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          prscrbr_npi as string,",
				"          prscrbr_last_org_name as string,",
				"          prscrbr_first_name as string,",
				"          prscrbr_city as string,",
				"          prscrbr_state_abrvtn as string,",
				"          prscrbr_type as string,",
				"          tot_clms as long,",
				"          tot_drug_cst as decimal(10,0),",
				"          tot_benes as long,",
				"          opioid_tot_clms as long,",
				"          etl_load_date_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'raw',",
				"     folderPath: 'prescriber_by_provider') ~> providerstream",
				"source(output(",
				"          prscrbr_geo_lvl as string,",
				"          prscrbr_geo_cd as string,",
				"          prscrbr_geo_desc as string,",
				"          brnd_name as string,",
				"          gnrc_name as string,",
				"          tot_clms as long,",
				"          tot_drug_cst as double,",
				"          tot_benes as long,",
				"          opioid_drug_flag as boolean,",
				"          antbtc_drug_flag as boolean,",
				"          antpsyct_drug_flag as boolean,",
				"          opioid_la_drug_flag as boolean,",
				"          source_file_name as string,",
				"          etl_load_date_time as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'raw',",
				"     folderPath: 'geography_and_drug') ~> geographybydrugstream",
				"renameproviderstreamcolumns derive(provider_name_full = case(",
				"isNull(prscrbr_first_name),",
				"trim(prscrbr_last_org_name),",
				"trim(prscrbr_first_name + ' '+ prscrbr_last_org_name)",
				"),",
				"          provider_type_standardized = iif(or(like(prscrbr_type, '%FAMILY%'), like(prscrbr_type,'%GENERAL%')), 'Primary Care', ",
				"iif(like(prscrbr_type, '%CARDIO%'), 'Cardiology', ",
				"iif(or(like(prscrbr_type, '%ONCOL%'), like(prscrbr_type, '%HEMATOL%')),'Oncology', ",
				"iif(like(prscrbr_type,'%PSYCH%'), 'Psychiatry', ",
				"iif(like(prscrbr_type,'%NEUR%'),'Neurology', 'Other Specialty'))))),",
				"          city_standardized = upper(trim(regexReplace(prscrbr_city, \"[^A-Za-z\\\\s]\", \"\"))),",
				"          provider_entity_type = iif(or(isNull(prscrbr_first_name),prscrbr_first_name==''),'Organization','Individual'),",
				"          is_high_volume_provider = iif(tot_clms > 10000, true(), false()),",
				"          state_name = case(",
				"    state_code == 'AL', 'Alabama',",
				"    state_code == 'AK', 'Alaska',",
				"    state_code == 'AZ', 'Arizona',",
				"    state_code == 'AR', 'Arkansas',",
				"    state_code == 'CA', 'California',",
				"    state_code == 'CO', 'Colorado',",
				"    state_code == 'CT', 'Connecticut',",
				"    state_code == 'DE', 'Delaware',",
				"    state_code == 'FL', 'Florida',",
				"    state_code == 'GA', 'Georgia',",
				"    state_code == 'HI', 'Hawaii',",
				"    state_code == 'ID', 'Idaho',",
				"    state_code == 'IL', 'Illinois',",
				"    state_code == 'IN', 'Indiana',",
				"    state_code == 'IA', 'Iowa',",
				"    state_code == 'KS', 'Kansas',",
				"    state_code == 'KY', 'Kentucky',",
				"    state_code == 'LA', 'Louisiana',",
				"    state_code == 'ME', 'Maine',",
				"    state_code == 'MD', 'Maryland',",
				"    state_code == 'MA', 'Massachusetts',",
				"    state_code == 'MI', 'Michigan',",
				"    state_code == 'MN', 'Minnesota',",
				"    state_code == 'MS', 'Mississippi',",
				"    state_code == 'MO', 'Missouri',",
				"    state_code == 'MT', 'Montana',",
				"    state_code == 'NE', 'Nebraska',",
				"    state_code == 'NV', 'Nevada',",
				"    state_code == 'NH', 'New Hampshire',",
				"    state_code == 'NJ', 'New Jersey',",
				"    state_code == 'NM', 'New Mexico',",
				"    state_code == 'NY', 'New York',",
				"    state_code == 'NC', 'North Carolina',",
				"    state_code == 'ND', 'North Dakota',",
				"    state_code == 'OH', 'Ohio',",
				"    state_code == 'OK', 'Oklahoma',",
				"    state_code == 'OR', 'Oregon',",
				"    state_code == 'PA', 'Pennsylvania',",
				"    state_code == 'RI', 'Rhode Island',",
				"    state_code == 'SC', 'South Carolina',",
				"    state_code == 'SD', 'South Dakota',",
				"    state_code == 'TN', 'Tennessee',",
				"    state_code == 'TX', 'Texas',",
				"    state_code == 'UT', 'Utah',",
				"    state_code == 'VT', 'Vermont',",
				"    state_code == 'VA', 'Virginia',",
				"    state_code == 'WA', 'Washington',",
				"    state_code == 'WV', 'West Virginia',",
				"    state_code == 'WI', 'Wisconsin',",
				"    state_code == 'WY', 'Wyoming',",
				"    state_code == 'DC', 'District of Columbia',",
				"    state_code == 'PR', 'Puerto Rico',",
				"    state_code == 'VI', 'Virgin Islands',",
				"    state_code == 'GU', 'Guam',",
				"    state_code == 'AS', 'American Samoa',",
				"    state_code == 'MP', 'Northern Mariana Islands',",
				"    state_code == 'AA', 'Armed Forces Americas',",
				"    state_code == 'AE', 'Armed Forces Europe',",
				"    state_code == 'AP', 'Armed Forces Pacific',",
				"    state_code == 'XX', 'Unknown',",
				"    state_code == 'ZZ', 'Foreign Country',",
				"    coalesce(state_code, 'Unknown')",
				"),",
				"          effective_date = currentTimestamp(),",
				"          end_date = toTimestamp(null()),",
				"          is_current = true(),",
				"          etl_load_date_time = currentTimestamp()) ~> providerstreamderivedcolumns",
				"providerstream select(mapColumn(",
				"          provider_id = prscrbr_npi,",
				"          prscrbr_last_org_name,",
				"          prscrbr_first_name,",
				"          prscrbr_city,",
				"          state_code = prscrbr_state_abrvtn,",
				"          prscrbr_type,",
				"          tot_clms,",
				"          tot_drug_cst,",
				"          tot_benes,",
				"          opioid_tot_clms,",
				"          etl_load_date_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renameproviderstreamcolumns",
				"geographybydrugstream select(mapColumn(",
				"          prscrbr_geo_lvl,",
				"          prscrbr_geo_cd,",
				"          prscrbr_geo_desc,",
				"          brnd_name,",
				"          gnrc_name,",
				"          tot_clms,",
				"          tot_drug_cst,",
				"          tot_benes,",
				"          is_opioid = opioid_drug_flag,",
				"          is_antibiotic = antbtc_drug_flag,",
				"          is_antipsychotic = antpsyct_drug_flag,",
				"          source_file_name,",
				"          etl_load_date_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectgeographybydrugstreamcols",
				"geographybydrugselectcols derive(brand_name_standardized = upper(trim(regexReplace(brnd_name, \"[^A-Za-z0-9\\\\s/-]\", \"\"))),",
				"          generic_name_standardized = upper(trim(regexReplace(gnrc_name, \"[^A-Za-z0-9\\\\s/-]\", \"\"))),",
				"          drug_category = iif(and(not(isNull(brnd_name)),brnd_name!=''), 'Brand', ",
				"iif(and(not(isNull(gnrc_name)),gnrc_name!=''), 'Generic', 'Other')),",
				"          drug_id = concat(upper(trim(regexReplace(brnd_name, \"[^A-Za-z0-9\\\\s/-]\", \"\"))),\"|\",upper(trim(regexReplace(brnd_name, \"[^A-Za-z0-9\\\\s/-]\", \"\"))))) ~> geographybydrugderivedcols",
				"providerstreamderivedcolumns select(mapColumn(",
				"          provider_id,",
				"          provider_name_full,",
				"          provider_type_standardized,",
				"          city_standardized,",
				"          state_code,",
				"          state_name,",
				"          provider_entity_type,",
				"          is_high_volume_provider,",
				"          etl_load_date_time,",
				"          effective_date,",
				"          end_date,",
				"          is_current,",
				"          etl_load_date_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectproviderstreamcolumns",
				"selectgeographybydrugstreamcols select(mapColumn(",
				"          brnd_name,",
				"          gnrc_name,",
				"          tot_clms,",
				"          tot_drug_cst",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdrugandclaimcost",
				"filtervalidclaimanddrugtotals aggregate(groupBy(brnd_name,",
				"          gnrc_name),",
				"     avg_cost_per_claim = sum(tot_drug_cst)/sum(tot_clms)) ~> calculateaveragecostperclaim",
				"selectdrugandclaimcost filter(and(and(not(isNull(tot_clms)), not(isNull(tot_drug_cst))), tot_clms > 0)) ~> filtervalidclaimanddrugtotals",
				"derivedColumnsforsilverdrugstandardization, calculateaveragecostperclaim join(geographybydrugselectcols@brnd_name == calculateaveragecostperclaim@brnd_name",
				"     && geographybydrugselectcols@gnrc_name == calculateaveragecostperclaim@gnrc_name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinedgeographydrugdataset",
				"geographybydrugderivedcols derive(therapeutic_class = iif(locate(upper(generic_name_standardized), 'ATORVASTATIN') >= 0 || locate(upper(generic_name_standardized), 'SIMVASTATIN') >= 0 || locate(upper(generic_name_standardized), 'ROSUVASTATIN') >= 0, 'Cardiovascular - Statins',",
				"iif(locate(upper(generic_name_standardized), 'LISINOPRIL') >= 0 || locate(upper(generic_name_standardized), 'LOSARTAN') >= 0 || locate(upper(generic_name_standardized), 'ENALAPRIL') >= 0, 'Cardiovascular - ACE/ARB', ",
				"iif(locate(upper(generic_name_standardized), 'METFORMIN') >= 0 || locate(upper(generic_name_standardized), 'INSULIN') >= 0 || locate(upper(generic_name_standardized), 'GLIPIZIDE') >= 0, 'Endocrine - Diabetes',",
				"iif(locate(upper(generic_name_standardized), 'AMOXICILLIN') >= 0 || locate(upper(generic_name_standardized), 'AZITHROMYCIN') >= 0 || locate(upper(generic_name_standardized), 'CIPROFLOXACIN') >= 0, 'Anti-Infective',",
				"iif(locate(upper(generic_name_standardized), 'SERTRALINE') >= 0 || locate(upper(generic_name_standardized), 'FLUOXETINE') >= 0 || locate(upper(generic_name_standardized), 'ESCITALOPRAM') >= 0, 'Psychiatric - Antidepressants',",
				"iif(locate(upper(generic_name_standardized), 'OMEPRAZOLE') >= 0 || locate(upper(generic_name_standardized), 'LANSOPRAZOLE') >= 0 || locate(upper(generic_name_standardized), 'PANTOPRAZOLE') >= 0, 'Gastrointestinal - PPI',",
				"iif(locate(upper(generic_name_standardized), 'GABAPENTIN') >= 0 || locate(upper(generic_name_standardized), 'PREGABALIN') >= 0 || locate(upper(generic_name_standardized), 'LAMOTRIGINE') >= 0, 'Neurological',",
				"iif(locate(upper(generic_name_standardized), 'OXYCODONE') >= 0 || locate(upper(generic_name_standardized), 'HYDROCODONE') >= 0 || locate(upper(generic_name_standardized), 'TRAMADOL') >= 0, 'Pain Management - Opioids',",
				"iif(locate(upper(generic_name_standardized), 'IBUPROFEN') >= 0 || locate(upper(generic_name_standardized), 'NAPROXEN') >= 0 || locate(upper(generic_name_standardized), 'ACETAMINOPHEN') >= 0, 'Pain Management - Other',",
				"'Other/Unclassified'))))))))),",
				"          effective_date = currentTimestamp(),",
				"          end_date = toTimestamp(null()),",
				"          is_current = true(),",
				"          etl_load_date_time = currentTimestamp(),",
				"          is_controlled_substance = iif(opioid_drug_flag || opioid_la_drug_flag, true(), false())) ~> derivedColumnsforsilverdrugstandardization",
				"joinedgeographydrugdataset select(mapColumn(",
				"          drug_id,",
				"          brand_name_standardized,",
				"          generic_name_standardized,",
				"          therapeutic_class,",
				"          drug_category,",
				"          is_controlled_substance,",
				"          is_opioid = opioid_drug_flag,",
				"          is_long_acting_opioid = opioid_la_drug_flag,",
				"          is_antibiotic = antbtc_drug_flag,",
				"          is_antipsychotic = antpsyct_drug_flag,",
				"          avg_cost_per_claim,",
				"          is_current,",
				"          effective_date,",
				"          end_date,",
				"          etl_load_date_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> silverdrugstandardizedcolumns",
				"geographybydrugstream select(mapColumn(",
				"          prscrbr_geo_lvl,",
				"          prscrbr_geo_cd,",
				"          prscrbr_geo_desc,",
				"          brnd_name,",
				"          gnrc_name,",
				"          tot_clms,",
				"          tot_drug_cst,",
				"          tot_benes,",
				"          opioid_drug_flag,",
				"          antbtc_drug_flag,",
				"          antpsyct_drug_flag,",
				"          opioid_la_drug_flag,",
				"          source_file_name,",
				"          etl_load_date_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> geographybydrugselectcols",
				"geographybydrugstream derive(prescription_id = md5(concat('GEO', prscrbr_geo_cd, brnd_name, gnrc_name)),",
				"          provider_id = toString(null()),",
				"          drug_id = md5(concat(upper(trim(regexReplace(brnd_name, \"[^A-Za-z0-9\\\\s/-]\", \"\"))), upper(trim(regexReplace(gnrc_name, \"[^A-Za-z0-9\\\\s/-]\", \"\"))))),",
				"          total_claims = coalesce(tot_clms, 0),",
				"          total_drug_cost = round(coalesce(tot_drug_cst, 0), 2),",
				"          is_suppressed = iif(or(between(tot_clms , 1, 10),between(tot_benes, 1, 10)), true(), false())) ~> geographybydrugrawderivedcols",
				"geographybydrugrawderivedcols derive(total_beneficiaries = iif(is_suppressed,toLong(null()),coalesce(tot_benes, 0))) ~> geographybydrugrawderivedcolspart2",
				"selectproviderstreamcolumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'prescriber_by_provider',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> silverproviderscleanedsink",
				"silverdrugstandardizedcolumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'geography_and_drug',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> silverdrugsstandardizedsink"
			]
		}
	}
}