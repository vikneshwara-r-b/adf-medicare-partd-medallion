{
	"name": "bronze_ingestion_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "providerstream"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "providerbronzesink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "selectprovider"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "changedatatypes"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prscrbr_NPI as integer,",
				"          Prscrbr_Last_Org_Name as string,",
				"          Prscrbr_First_Name as string,",
				"          Prscrbr_MI as string,",
				"          Prscrbr_Crdntls as string,",
				"          Prscrbr_Gndr as string,",
				"          Prscrbr_Ent_Cd as string,",
				"          Prscrbr_St1 as string,",
				"          Prscrbr_St2 as string,",
				"          Prscrbr_City as string,",
				"          Prscrbr_State_Abrvtn as string,",
				"          Prscrbr_State_FIPS as short,",
				"          Prscrbr_zip5 as integer,",
				"          Prscrbr_RUCA as double,",
				"          Prscrbr_RUCA_Desc as string,",
				"          Prscrbr_Cntry as string,",
				"          Prscrbr_Type as string,",
				"          Prscrbr_Type_Src as string,",
				"          Tot_Clms as short,",
				"          Tot_30day_Fills as double,",
				"          Tot_Drug_Cst as double,",
				"          Tot_Day_Suply as integer,",
				"          Tot_Benes as short,",
				"          GE65_Sprsn_Flag as string,",
				"          GE65_Tot_Clms as short,",
				"          GE65_Tot_30day_Fills as double,",
				"          GE65_Tot_Drug_Cst as double,",
				"          GE65_Tot_Day_Suply as integer,",
				"          GE65_Bene_Sprsn_Flag as string,",
				"          GE65_Tot_Benes as short,",
				"          Brnd_Sprsn_Flag as string,",
				"          Brnd_Tot_Clms as short,",
				"          Brnd_Tot_Drug_Cst as double,",
				"          Gnrc_Sprsn_Flag as string,",
				"          Gnrc_Tot_Clms as short,",
				"          Gnrc_Tot_Drug_Cst as double,",
				"          Othr_Sprsn_Flag as string,",
				"          Othr_Tot_Clms as short,",
				"          Othr_Tot_Drug_Cst as double,",
				"          MAPD_Sprsn_Flag as string,",
				"          MAPD_Tot_Clms as short,",
				"          MAPD_Tot_Drug_Cst as double,",
				"          PDP_Sprsn_Flag as string,",
				"          PDP_Tot_Clms as short,",
				"          PDP_Tot_Drug_Cst as double,",
				"          LIS_Sprsn_Flag as string,",
				"          LIS_Tot_Clms as short,",
				"          LIS_Drug_Cst as double,",
				"          NonLIS_Sprsn_Flag as string,",
				"          NonLIS_Tot_Clms as short,",
				"          NonLIS_Drug_Cst as double,",
				"          Opioid_Tot_Clms as short,",
				"          Opioid_Tot_Drug_Cst as double,",
				"          Opioid_Tot_Suply as integer,",
				"          Opioid_Tot_Benes as short,",
				"          Opioid_Prscrbr_Rate as double,",
				"          Opioid_LA_Tot_Clms as short,",
				"          Opioid_LA_Tot_Drug_Cst as double,",
				"          Opioid_LA_Tot_Suply as short,",
				"          Opioid_LA_Tot_Benes as short,",
				"          Opioid_LA_Prscrbr_Rate as double,",
				"          Antbtc_Tot_Clms as short,",
				"          Antbtc_Tot_Drug_Cst as double,",
				"          Antbtc_Tot_Benes as short,",
				"          Antpsyct_GE65_Sprsn_Flag as string,",
				"          Antpsyct_GE65_Tot_Clms as short,",
				"          Antpsyct_GE65_Tot_Drug_Cst as double,",
				"          Antpsyct_GE65_Bene_Suprsn_Flag as string,",
				"          Antpsyct_GE65_Tot_Benes as short,",
				"          Bene_Avg_Age as double,",
				"          Bene_Age_LT_65_Cnt as short,",
				"          Bene_Age_65_74_Cnt as short,",
				"          Bene_Age_75_84_Cnt as short,",
				"          Bene_Age_GT_84_Cnt as short,",
				"          Bene_Feml_Cnt as short,",
				"          Bene_Male_Cnt as short,",
				"          Bene_Race_Wht_Cnt as short,",
				"          Bene_Race_Black_Cnt as short,",
				"          Bene_Race_Api_Cnt as short,",
				"          Bene_Race_Hspnc_Cnt as short,",
				"          Bene_Race_Natind_Cnt as short,",
				"          Bene_Race_Othr_Cnt as short,",
				"          Bene_Dual_Cnt as short,",
				"          Bene_Ndual_Cnt as short,",
				"          Bene_Avg_Risk_Scre as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'source_file_name',",
				"     format: 'delimited',",
				"     fileSystem: 'staging',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\"',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['prescriber_by_provider/*']) ~> providerstream",
				"providerstream select(mapColumn(",
				"          prscrbr_npi = Prscrbr_NPI,",
				"          prscrbr_last_org_name = Prscrbr_Last_Org_Name,",
				"          prscrbr_first_name = Prscrbr_First_Name,",
				"          prscrbr_city = Prscrbr_City,",
				"          prscrbr_state_abrvtn = Prscrbr_State_Abrvtn,",
				"          prscrbr_type = Prscrbr_Type,",
				"          tot_clms = Tot_Clms,",
				"          tot_drug_cst = Tot_Drug_Cst,",
				"          tot_benes = Tot_Benes,",
				"          Opioid_Tot_Clms",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectprovider",
				"changedatatypes alterRow(upsertIf(1==1)) ~> AlterRow1",
				"selectprovider cast(output(",
				"          prscrbr_npi as string,",
				"          prscrbr_last_org_name as string,",
				"          prscrbr_first_name as string,",
				"          prscrbr_city as string,",
				"          tot_clms as long,",
				"          Opioid_Tot_Clms as long",
				"     ),",
				"     errors: false) ~> changedatatypes",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'raw',",
				"     folderPath: 'prescriber_by_provider',",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['prscrbr_npi'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> providerbronzesink"
			]
		}
	}
}