{
	"name": "gold_ingestion_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "silverprovidersource"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "geographysilverzonerecords"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "silverdrugsstandardized"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "silverprescriptionsvalidated"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "dimproviderssink"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "dimdrugsink"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "dimtherapeuticssink"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "dimgeographysink"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "facthealthcaretransactionsssink"
				}
			],
			"transformations": [
				{
					"name": "filteractiverecords"
				},
				{
					"name": "selectsilverproviderrecords"
				},
				{
					"name": "providerjoinedgeography"
				},
				{
					"name": "finaldimproviderrecords"
				},
				{
					"name": "selectsilverdrugsstandardized"
				},
				{
					"name": "geographysilverselectcols"
				},
				{
					"name": "dimgeographyderivedcols"
				},
				{
					"name": "therapeuticstatsaggregate"
				},
				{
					"name": "dimtherapeuticssurrogateKey"
				},
				{
					"name": "derivedColumndimtherapeutics"
				},
				{
					"name": "dimterapeuticssurrogateKey"
				},
				{
					"name": "prescriptionjoinedproviders"
				},
				{
					"name": "prescriptionjoineddrug"
				},
				{
					"name": "silverprescriptionsvalidatedderivedColumn"
				},
				{
					"name": "filtersilverprescriptionsvalidatedrows"
				},
				{
					"name": "silverprescriptionsjoinedgeography"
				},
				{
					"name": "silverprescriptionsjoindimtherapeutics"
				},
				{
					"name": "facthealthcaretransactionsselectcols"
				},
				{
					"name": "defaulandactualdimprovider"
				},
				{
					"name": "dimproviderdefaultrowfilter"
				},
				{
					"name": "dimproviderderivedcolumns"
				},
				{
					"name": "dimtherapeuticareasdefaultrowfilter"
				},
				{
					"name": "dimtherapeuticareasdefaultrow"
				},
				{
					"name": "handlednullvaluesindimkeys"
				},
				{
					"name": "defaultandactualdimtherapeutics"
				}
			],
			"scriptLines": [
				"source(output(",
				"          provider_key as long,",
				"          provider_id as integer,",
				"          provider_name_full as string,",
				"          provider_type_standardized as string,",
				"          city_standardized as string,",
				"          state_code as string,",
				"          state_name as string,",
				"          provider_entity_type as string,",
				"          is_high_volume_provider as boolean,",
				"          effective_date as timestamp,",
				"          end_date as timestamp,",
				"          is_current as boolean,",
				"          etl_load_date_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'silver_providers_cleaned') ~> silverprovidersource",
				"source(output(",
				"          geography_id as string,",
				"          state_code as string,",
				"          state_name as string,",
				"          fips_code as string,",
				"          census_region as string,",
				"          census_division as string,",
				"          etl_load_date_time as timestamp,",
				"          is_current as boolean,",
				"          effective_date as timestamp,",
				"          end_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'silver_geography_reference') ~> geographysilverzonerecords",
				"source(output(",
				"          drug_id as string,",
				"          brand_name_standardized as string,",
				"          generic_name_standardized as string,",
				"          therapeutic_class as string,",
				"          drug_category as string,",
				"          is_controlled_substance as boolean,",
				"          is_opioid as boolean,",
				"          is_long_acting_opioid as boolean,",
				"          is_antibiotic as boolean,",
				"          is_antipsychotic as boolean,",
				"          avg_cost_per_claim as double,",
				"          etl_load_date_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'silver_drugs_standardized') ~> silverdrugsstandardized",
				"source(output(",
				"          prescription_id as string,",
				"          provider_id as string,",
				"          drug_id as string,",
				"          geography_level as string,",
				"          state_code as string,",
				"          total_claims as long,",
				"          total_30day_fills as double,",
				"          total_drug_cost as decimal(10,0),",
				"          total_beneficiaries as long,",
				"          elderly_claims as long,",
				"          elderly_cost as long,",
				"          elderly_beneficiaries as long,",
				"          is_suppressed as boolean,",
				"          data_reporting_period as integer,",
				"          etl_load_date_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'silver_prescriptions_validated') ~> silverprescriptionsvalidated",
				"silverprovidersource filter(equals(is_current,true())) ~> filteractiverecords",
				"filteractiverecords select(mapColumn(",
				"          provider_key,",
				"          provider_id,",
				"          provider_name = provider_name_full,",
				"          provider_specialty = provider_type_standardized,",
				"          provider_entity_type,",
				"          is_high_volume_provider,",
				"          city = city_standardized,",
				"          state_code,",
				"          state_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectsilverproviderrecords",
				"selectsilverproviderrecords, geographysilverzonerecords join(selectsilverproviderrecords@state_code == geographysilverzonerecords@state_code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> providerjoinedgeography",
				"providerjoinedgeography select(mapColumn(",
				"          provider_key,",
				"          provider_id,",
				"          provider_name,",
				"          provider_specialty,",
				"          provider_entity_type,",
				"          is_high_volume_provider,",
				"          city,",
				"          state_code = selectsilverproviderrecords@state_code,",
				"          state_name = selectsilverproviderrecords@state_name,",
				"          region = census_region,",
				"          division = census_division",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> finaldimproviderrecords",
				"silverdrugsstandardized select(mapColumn(",
				"          drug_id,",
				"          brand_name = brand_name_standardized,",
				"          generic_name = generic_name_standardized,",
				"          therapeutic_class,",
				"          drug_category,",
				"          is_controlled_substance,",
				"          is_opioid,",
				"          is_long_acting_opioid,",
				"          is_antibiotic,",
				"          is_antipsychotic,",
				"          avg_cost_per_claim",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectsilverdrugsstandardized",
				"geographysilverzonerecords select(mapColumn(",
				"          geography_id,",
				"          state_code,",
				"          state_name,",
				"          fips_code,",
				"          census_region,",
				"          census_division",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> geographysilverselectcols",
				"geographysilverselectcols derive(is_territory = /* CASE WHEN g.state_code IN ('PR','VI','GU','AS','MP') THEN TRUE ELSE FALSE END */",
				"case(in(['PR','VI','GU','AS','MP'],state_code), true(), false()),",
				"          region_sort_order = /* CASE g.census_region WHEN 'Northeast' THEN 1 WHEN 'Midwest' THEN 2 WHEN 'South' THEN 3 WHEN 'West' THEN 4 ELSE 5 END */",
				"case(",
				"    census_region == 'Northeast',1,",
				"    census_region == 'Midwest', 2,",
				"    census_region == 'South', 3,",
				"    census_region == 'West', 4,",
				"    5",
				")) ~> dimgeographyderivedcols",
				"silverdrugsstandardized aggregate(groupBy(therapeutic_class),",
				"     avg_cost = avg(avg_cost_per_claim),",
				"          opioid_count = /* SUM(CASE WHEN d.is_opioid = TRUE THEN 1 ELSE 0 END) */",
				"sum(iif(is_opioid, 1, 0)),",
				"          controlled_count = /* SUM(CASE WHEN d.is_controlled_substance = TRUE THEN 1 ELSE 0 END) as controlled_count */",
				"sum(iif(is_controlled_substance,1,0))) ~> therapeuticstatsaggregate",
				"therapeuticstatsaggregate keyGenerate(output(therapeutic_area_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> dimtherapeuticssurrogateKey",
				"dimtherapeuticssurrogateKey derive(therapeutic_category = case(like(therapeutic_class,'%Cardiovascular%'), 'Cardiovascular', ",
				"like(therapeutic_class, '%Endocrine%'), 'Endocrine',",
				"like(therapeutic_class, '%Psychiatric%'), 'Mental Health',",
				"like(therapeutic_class, '%Pain%'), 'Pain Management',",
				"like(therapeutic_class, '%Anti-Infective%'), 'Anti-Infective',",
				"'Other'",
				"),",
				"          is_chronic_condition = case(in(['Cardiovascular - Statins', 'Endocrine - Diabetes', 'Psychiatric - Antidepressants'],therapeutic_class ), true(), false()),",
				"          is_high_cost_area = iif(avg_cost > 100, true(), false()),",
				"          primary_patient_age_group = case(",
				"    or(like(therapeutic_class, '%Cardiovascular%'), like(therapeutic_class, '%Endocrine%')),'Elderly',",
				"    like(therapeutic_class, '%Psychiatric%'),'Adult',",
				"    'All Ages'",
				"),",
				"          regulatory_risk_level = case(opioid_count > 0, 'High',",
				"controlled_count > 0, 'Medium',",
				"'Low')) ~> derivedColumndimtherapeutics",
				"derivedColumndimtherapeutics keyGenerate(output(therapeutic_area_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> dimterapeuticssurrogateKey",
				"filtersilverprescriptionsvalidatedrows, finaldimproviderrecords join(toInteger(silverprescriptionsvalidated@provider_id) == finaldimproviderrecords@provider_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> prescriptionjoinedproviders",
				"prescriptionjoinedproviders, selectsilverdrugsstandardized join(silverprescriptionsvalidated@drug_id == selectsilverdrugsstandardized@drug_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> prescriptionjoineddrug",
				"silverprescriptionsvalidated derive(data_quality_flag = case(is_suppressed, 'SUPPRESSED', isNull(total_claims),'MISSING','CLEAN'),",
				"          last_updated = currentTimestamp()) ~> silverprescriptionsvalidatedderivedColumn",
				"silverprescriptionsvalidatedderivedColumn filter(and(is_suppressed==false(), not(isNull(total_claims)))) ~> filtersilverprescriptionsvalidatedrows",
				"prescriptionjoineddrug, dimgeographyderivedcols join(case(geography_level == 'National','US',silverprescriptionsvalidated@state_code) == geographysilverselectcols@state_code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> silverprescriptionsjoinedgeography",
				"silverprescriptionsjoinedgeography, dimtherapeuticssurrogateKey join(selectsilverdrugsstandardized@therapeutic_class == therapeuticstatsaggregate@therapeutic_class,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> silverprescriptionsjoindimtherapeutics",
				"handlednullvaluesindimkeys select(mapColumn(",
				"          provider_key,",
				"          drug_id,",
				"          geography_id,",
				"          therapeutic_area_key,",
				"          total_claims,",
				"          total_beneficiaries,",
				"          total_drug_cost,",
				"          total_30day_fills,",
				"          elderly_claims,",
				"          elderly_beneficiaries,",
				"          elderly_cost,",
				"          data_quality_flag,",
				"          last_updated",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> facthealthcaretransactionsselectcols",
				"finaldimproviderrecords, dimproviderderivedcolumns union(byName: true)~> defaulandactualdimprovider",
				"finaldimproviderrecords filter(provider_key==1) ~> dimproviderdefaultrowfilter",
				"dimproviderdefaultrowfilter derive(provider_key = -1,",
				"          provider_id = -1,",
				"          provider_name = \"UNKNOWN\",",
				"          provider_specialty = \"UNKNOWN\",",
				"          provider_entity_type = \"UNKNOWN\",",
				"          is_high_volume_provider = false(),",
				"          city = \"UNKNOWN\",",
				"          state_code = \"UNKNOWN\",",
				"          state_name = \"UNKNOWN\",",
				"          region = \"UNKNOWN\",",
				"          division = \"UNKNOWN\") ~> dimproviderderivedcolumns",
				"dimterapeuticssurrogateKey filter(therapeutic_area_key==1) ~> dimtherapeuticareasdefaultrowfilter",
				"dimtherapeuticareasdefaultrowfilter derive(therapeutic_area_key = -1,",
				"          therapeutic_class = \"UNKNOWN\",",
				"          therapeutic_category = \"UNKNOWN\",",
				"          is_chronic_condition = false(),",
				"          is_high_cost_area = false(),",
				"          primary_patient_age_group = \"UNKNOWN\",",
				"          regulatory_risk_level = \"UNKNOWN\",",
				"          avg_cost = 0.00,",
				"          opioid_count = 0,",
				"          controlled_count = 0) ~> dimtherapeuticareasdefaultrow",
				"silverprescriptionsjoindimtherapeutics derive(provider_key = coalesce(provider_key,-1),",
				"          therapeutic_area_key = coalesce(therapeutic_area_key, -1),",
				"          drug_id = coalesce(silverprescriptionsvalidated@drug_id, 'UNKNOWN'),",
				"          geography_id = coalesce(geography_id, 'UNKNOWN'),",
				"          etl_load_date_time = currentTimestamp()) ~> handlednullvaluesindimkeys",
				"dimterapeuticssurrogateKey, dimtherapeuticareasdefaultrow union(byName: true)~> defaultandactualdimtherapeutics",
				"defaulandactualdimprovider sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'dim_providers',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dimproviderssink",
				"selectsilverdrugsstandardized sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'dim_drugs',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          drug_id,",
				"          brand_name,",
				"          generic_name,",
				"          therapeutic_class,",
				"          drug_category,",
				"          is_controlled_substance,",
				"          is_opioid,",
				"          is_long_acting_opioid,",
				"          is_antibiotic,",
				"          is_antipsychotic,",
				"          avg_cost_per_claim",
				"     )) ~> dimdrugsink",
				"defaultandactualdimtherapeutics sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'dim_therapeutic_areas',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dimtherapeuticssink",
				"dimgeographyderivedcols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'dim_geography',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dimgeographysink",
				"facthealthcaretransactionsselectcols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'fact_prescriptions',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> facthealthcaretransactionsssink"
			]
		}
	}
}